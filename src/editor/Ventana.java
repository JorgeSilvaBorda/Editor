package editor;

import java.awt.*;
import java.awt.datatransfer.StringSelection;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;
import java.net.URL;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;
import org.fife.ui.rsyntaxtextarea.SyntaxConstants;
import org.fife.ui.rtextarea.RTextScrollPane;

/**
 * @author Jorge Silva Borda
 */
public final class Ventana extends javax.swing.JFrame {

    Configuracion config = new Configuracion();
    public static String rutaSeleccionada;
    public Log log = new Log();
    RSyntaxTextArea textArea = new RSyntaxTextArea(20, 60);
    MiModeloTabla m = new MiModeloTabla();
    JTable salida = new JTable(m);

    /**
     * Creates new form Ventana
     */
    public Ventana() {
        initComponents();

        iniciarTexto();
        iniciarLog();
        log.info("Sistema iniciado.");
        String so = System.getProperty("os.name");
        log.info("El sistema operativo es: " + so);
        log.info("El usuario utilizando es: " + System.getProperty("user.name"));
        log.info("El lenguaje por defecto es : Java.");
        Lector l = new Lector();
        //Ac치 se puede obtener la configuraci칩n en caso de exixtir...
        //config = l.leerConfig("src/Editor/config/config.cfg");
        FileTree arbol = new FileTree(new File("."));
        panelDerecho.add("Listado", arbol);
        salida.setAutoscrolls(true);
        agregarPopUpTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cp = new javax.swing.JPanel();
        splitHor = new javax.swing.JSplitPane();
        splitVer = new javax.swing.JSplitPane();
        panelIzquierdo = new javax.swing.JPanel();
        panelDerecho = new javax.swing.JTabbedPane();
        panelFondo = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        btnJava = new javax.swing.JMenuItem();
        btnSql = new javax.swing.JMenuItem();
        btnPhp = new javax.swing.JMenuItem();
        btnJavascript = new javax.swing.JMenuItem();
        btnHtml = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenu6 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu7 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(800, 600));
        addWindowStateListener(new java.awt.event.WindowStateListener() {
            public void windowStateChanged(java.awt.event.WindowEvent evt) {
                formWindowStateChanged(evt);
            }
        });

        cp.setLayout(new java.awt.BorderLayout());

        splitHor.setDividerLocation(400);
        splitHor.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        splitVer.setDividerLocation(640);

        panelIzquierdo.setMinimumSize(new java.awt.Dimension(800, 400));
        panelIzquierdo.setLayout(new javax.swing.BoxLayout(panelIzquierdo, javax.swing.BoxLayout.LINE_AXIS));
        splitVer.setLeftComponent(panelIzquierdo);
        splitVer.setRightComponent(panelDerecho);

        splitHor.setTopComponent(splitVer);

        panelFondo.setMaximumSize(new java.awt.Dimension(2147483647, 200));
        panelFondo.setMinimumSize(new java.awt.Dimension(0, 50));
        panelFondo.setLayout(new java.awt.BorderLayout());
        splitHor.setRightComponent(panelFondo);

        cp.add(splitHor, java.awt.BorderLayout.CENTER);

        jMenu1.setText("Archivo");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edici칩n");

        jMenu3.setText("Lenguaje");

        btnJava.setText("Java");
        btnJava.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnJavaActionPerformed(evt);
            }
        });
        jMenu3.add(btnJava);

        btnSql.setText("Sql");
        btnSql.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSqlActionPerformed(evt);
            }
        });
        jMenu3.add(btnSql);

        btnPhp.setText("Php");
        btnPhp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPhpActionPerformed(evt);
            }
        });
        jMenu3.add(btnPhp);

        btnJavascript.setText("JavaScript");
        btnJavascript.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnJavascriptActionPerformed(evt);
            }
        });
        jMenu3.add(btnJavascript);

        btnHtml.setText("HTML");
        btnHtml.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHtmlActionPerformed(evt);
            }
        });
        jMenu3.add(btnHtml);

        jMenu2.add(jMenu3);

        jMenuBar1.add(jMenu2);

        jMenu4.setText("Configuraci칩n");

        jMenu6.setText("SQL");

        jMenuItem2.setText("Servidor SQL");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem2);

        jMenu4.add(jMenu6);

        jMenu7.setText("PHP");

        jMenuItem3.setText("Servicio PHP");
        jMenu7.add(jMenuItem3);

        jMenu4.add(jMenu7);

        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(cp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(cp, javax.swing.GroupLayout.DEFAULT_SIZE, 459, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowStateChanged(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowStateChanged

    }//GEN-LAST:event_formWindowStateChanged

    private void btnSqlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSqlActionPerformed
        textArea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_SQL);
        log.info("Lenguaje cambiado a SQL.");
    }//GEN-LAST:event_btnSqlActionPerformed

    private void btnJavaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnJavaActionPerformed
        textArea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_JAVA);
        log.info("Lenguaje cambiado a Java.");
    }//GEN-LAST:event_btnJavaActionPerformed

    private void btnPhpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPhpActionPerformed
        textArea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_PHP);
        log.info("Lenguaje cambiado a PHP.");
    }//GEN-LAST:event_btnPhpActionPerformed

    private void btnJavascriptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnJavascriptActionPerformed
        textArea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_JAVASCRIPT);
        log.info("Lenguaje cambiado a JavaScript.");
    }//GEN-LAST:event_btnJavascriptActionPerformed

    private void btnHtmlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHtmlActionPerformed
        textArea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_HTML);
        log.info("Lenguaje cambiado a HTML.");
    }//GEN-LAST:event_btnHtmlActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        ConfigSql config = new ConfigSql();
        config.setVisible(true);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ventana().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem btnHtml;
    private javax.swing.JMenuItem btnJava;
    private javax.swing.JMenuItem btnJavascript;
    private javax.swing.JMenuItem btnPhp;
    private javax.swing.JMenuItem btnSql;
    private javax.swing.JPanel cp;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JTabbedPane panelDerecho;
    private javax.swing.JPanel panelFondo;
    private javax.swing.JPanel panelIzquierdo;
    private javax.swing.JSplitPane splitHor;
    private javax.swing.JSplitPane splitVer;
    // End of variables declaration//GEN-END:variables

    public void iniciarLog() {
        //Inicia la tabla en el comienzo del programa
        salida.setAutoscrolls(true);
        JScrollPane scroll = new JScrollPane(salida);
        scroll.setViewportView(salida);
        MiModeloTabla modelo = new MiModeloTabla();
        modelo.addColumn("TIPO");
        modelo.addColumn("HORA");
        modelo.addColumn("MENSAJE");
        salida.setModel(modelo);

        salida.getColumn("TIPO").setWidth(40);
        salida.getColumn("TIPO").setMaxWidth(40);
        salida.getColumn("TIPO").setPreferredWidth(40);

        salida.getColumn("HORA").setWidth(120);
        salida.getColumn("HORA").setMaxWidth(120);
        salida.getColumn("HORA").setPreferredWidth(120);
        salida.setGridColor(Color.WHITE);
        panelFondo.add(scroll);
        Log l = new Log();
        l.info("Codificaci칩n iniciada.");
    }

    public void iniciarTexto() {
        //Inicia el panel de texto...
        textArea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_JAVA);
        textArea.setCodeFoldingEnabled(true);
        RTextScrollPane sp = new RTextScrollPane(textArea);
        panelIzquierdo.add(sp);
        textArea.setTabSize(4);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        Log l = new Log();
        l.info("Se inicia el gestor de texto.");
    }

    //Para poder mostrar la imagen en la tabla
    public ImageIcon createImage(String path) {
        URL imgURL = getClass().getResource(path);
        if (imgURL != null) {
            return new ImageIcon(imgURL);
        } else {
            System.err.println("Couldn't find file: " + path);
            return null;
        }
    }

    public Class<?> getColumnClass(int columnIndex) {
        return Object.class;
    }

    private class MiModeloTabla extends DefaultTableModel {

        public MiModeloTabla(Object[] data) {
            super();
        }

        public MiModeloTabla() {
            super();
        }

        @Override
        public Class<?> getColumnClass(int columnIndex) {
            Class<?> clazz = Object.class;
            Object aux = getValueAt(0, columnIndex);
            if (aux != null) {
                clazz = aux.getClass();
            }
            return clazz;
        }
    }

    //Clase que logea todo en la tabla...
    class Log {

        //Metoodo Error. Pone el icono de error.
        void error(String mensaje) {
            Calendar Cal = Calendar.getInstance();
            String fec = Cal.get(Calendar.DATE) + "/"
                    + (Cal.get(Calendar.MONTH) + 1) + "/"
                    + Cal.get(Calendar.YEAR) + " "
                    + Cal.get(Calendar.HOUR_OF_DAY) + ":"
                    + Cal.get(Calendar.MINUTE) + ":"
                    + Cal.get(Calendar.SECOND);
            SimpleAttributeSet attrs = new SimpleAttributeSet();
            StyleConstants.setBold(attrs, true);
            java.awt.Font fuente = new java.awt.Font("Arial", Font.BOLD, 10);
            MiModeloTabla modelo = (MiModeloTabla) salida.getModel();
            Object[] data = {createImage("img/error.png"), fec, mensaje};
            modelo.addRow(data);
        }

        //Metoodo Info. Pone el icono de info.
        void info(String mensaje) {
            Calendar Cal = Calendar.getInstance();
            String fec = Cal.get(Calendar.DATE) + "/"
                    + (Cal.get(Calendar.MONTH) + 1) + "/"
                    + Cal.get(Calendar.YEAR) + " "
                    + Cal.get(Calendar.HOUR_OF_DAY) + ":"
                    + Cal.get(Calendar.MINUTE) + ":"
                    + Cal.get(Calendar.SECOND);
            SimpleAttributeSet attrs = new SimpleAttributeSet();
            StyleConstants.setBold(attrs, true);
            java.awt.Font fuente = new java.awt.Font("Arial", Font.BOLD, 10);
            MiModeloTabla modelo = (MiModeloTabla) salida.getModel();
            Object[] data = {createImage("img/info.png"), fec, mensaje};
            modelo.addRow(data);
        }

        //Metoodo Advertencia. Pone el icono de advertencia.
        void advertencia(String mensaje) {
            Calendar Cal = Calendar.getInstance();
            String fec = Cal.get(Calendar.DATE) + "/"
                    + (Cal.get(Calendar.MONTH) + 1) + "/"
                    + Cal.get(Calendar.YEAR) + " "
                    + Cal.get(Calendar.HOUR_OF_DAY) + ":"
                    + Cal.get(Calendar.MINUTE) + ":"
                    + Cal.get(Calendar.SECOND);
            SimpleAttributeSet attrs = new SimpleAttributeSet();
            StyleConstants.setBold(attrs, true);
            java.awt.Font fuente = new java.awt.Font("Arial", Font.BOLD, 10);
            MiModeloTabla modelo = (MiModeloTabla) salida.getModel();
            Object[] data = {createImage("img/advertencia.png"), fec, mensaje};
            modelo.addRow(data);
        }
    }

    public void guardarConfigSql() {
        Object[] parametros = {"RUTA", "SERVIDOR", "USUARIO", "CLAVE", "OTROS"};

        Configuracion c = new Configuracion("SQL", parametros);
        Escritor e = new Escritor();
        Object[] resp = e.escribirConfig(c, "src/Editor/config/config.cfg");
        if ((boolean) resp[0] == false) {
            log.error((String) resp[1]);
        } else {
            log.info((String) resp[1]);
        }
    }

    public void ejecutarComando(String comando) {
        //String so = System.getProperty("os.name");
        String s;
        try {
            Process p = Runtime.getRuntime().exec(comando);
            BufferedReader stdInput = new BufferedReader(new InputStreamReader(p.getInputStream()));
            BufferedReader stdError = new BufferedReader(new InputStreamReader(p.getErrorStream()));
            while ((s = stdInput.readLine()) != null) {
                log.info(s);
            }
            while ((s = stdError.readLine()) != null) {
                log.error(s);
            }
        } catch (IOException ex) {
            Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void log(String tipo, String mensaje) {
        //Para llamar a los log de ventana a trav칠s de la clase principal (Editor)
        if (tipo.equals("error")) {
            log.error(mensaje);
        } else if (tipo.equals("info")) {
            log.info(mensaje);
        } else if (tipo.equals("advertencia")) {
            log.advertencia(mensaje);
        }
    }

    public boolean limpiarSalida() {
        DefaultTableModel m = (DefaultTableModel) salida.getModel();
        m.setRowCount(0);
        salida.setModel(m);
        return true;
    }

    public void agregarPopUpTabla() {
        JPopupMenu menu = new JPopupMenu();
        
        //Menu item para poder limpiar toda la salida de la tabla.
        JMenuItem men = new JMenuItem("Limpiar Salida");
        ActionListener ac = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                limpiarSalida();
            }
        };
        men.addActionListener(ac);
        menu.add(men);
        
        //Menu item para seleccionar toda la tabla.
        men = new JMenuItem("Seleccionar todo");
        ac = new ActionListener() {
            DefaultTableModel mod = (DefaultTableModel) salida.getModel();
            @Override
            public void actionPerformed(ActionEvent e) {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                if (salida.getRowCount() >= 1) {
                    for (int i = 0; i < salida.getRowCount(); i++) {
                        //Ac치 seleccionar todo......
                        salida.clearSelection();
                        salida.changeSelection(0, 2, false, false);
                        salida.changeSelection(salida.getRowCount() - 1, 2, false, true);
                    }
                }
            }
        };
        men.addActionListener(ac);
        menu.add(men);
        salida.setComponentPopupMenu(menu);
        
        men = new JMenuItem("Copiar al portapapeles");
        ac = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                
            }
        };
        menu.add(men);
    }
}
